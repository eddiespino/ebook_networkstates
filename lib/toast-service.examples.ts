/**
 * EJEMPLOS: Sistema Centralizado de Toasts
 *
 * Este archivo muestra todos los casos de uso del servicio de toasts
 * sin necesidad de contexto React
 */

import {
  showSuccessToast,
  showErrorToast,
  showWarningToast,
  showInfoToast,
  showLoadingToast,
} from "@/lib/toast-service";

/**
 * ‚úÖ CASO 1: Notificaci√≥n de √âxito
 * Usa en: Guardado exitoso, acci√≥n completada, etc.
 */
export function exampleSuccess(): void {
  showSuccessToast(
    "Guardado exitosamente",
    "Los cambios se han guardado en la base de datos"
  );
}

/**
 * ‚ùå CASO 2: Notificaci√≥n de Error
 * Usa en: Fallos en carga de recursos, errores de API, etc.
 */
export function exampleError(): void {
  showErrorToast(
    "Error al cargar el PDF",
    "Verifica tu conexi√≥n a internet o intenta m√°s tarde"
  );
}

/**
 * ‚ö†Ô∏è CASO 3: Notificaci√≥n de Advertencia
 * Usa en: Acciones que requieren atenci√≥n, procesos estallados, etc.
 */
export function exampleWarning(): void {
  showWarningToast(
    "Buffering en progreso",
    "Descargando contenido de audio..."
  );
}

/**
 * ‚ÑπÔ∏è CASO 4: Notificaci√≥n Informativa
 * Usa en: Informaci√≥n general, cambios de estado, etc.
 */
export function exampleInfo(): void {
  showInfoToast("Progreso de lectura", "Has alcanzado el 50% del libro");
}

/**
 * üîÑ CASO 5: Notificaci√≥n de Carga (sin tiempo l√≠mite)
 * Usa en: Procesos que tardan tiempo, carga de documentos, etc.
 */
export function exampleLoading(): void {
  showLoadingToast(
    "Procesando...",
    "Por favor espera mientras se carga el contenido"
  );
}

/**
 * ============================================
 * CASOS DE USO EN CONTEXTO REAL
 * ============================================
 */

/**
 * Caso: Manejo de Error en Hook de Audio
 */
export function audioPlayerErrorExample(): void {
  const handleAudioError = (error: Event): void => {
    console.error("Error playing audio:", error);
    showErrorToast(
      "Error de reproducci√≥n",
      "No pudimos cargar el archivo de audio"
    );
  };

  // Usar en evento de error del audio element
  // audio.addEventListener('error', handleAudioError);
}

/**
 * Caso: Detecci√≥n de Buffering
 */
export function audioBufferingExample(): void {
  const handleAudioStalled = (): void => {
    console.warn("Audio stalled - buffering");
    showWarningToast("Buffering...", "Descargando contenido de audio");
  };

  // Usar en evento de stalled del audio element
  // audio.addEventListener('stalled', handleAudioStalled);
}

/**
 * Caso: Error en Carga de PDF
 */
export function pdfLoadErrorExample(): void {
  const handlePdfError = (error: Error): void => {
    console.error("PDF load error:", error.message);
    showErrorToast(
      "Error al cargar el PDF",
      `${error.message || "Verifica tu conexi√≥n a internet"}`
    );
  };

  // Usar en onLoadError del componente Document
  // <Document onLoadError={handlePdfError} />
}

/**
 * Caso: Validaci√≥n de Formulario
 */
export function formValidationExample(isValid: boolean): void {
  if (!isValid) {
    showErrorToast(
      "Formulario inv√°lido",
      "Por favor completa todos los campos requeridos"
    );
  } else {
    showSuccessToast(
      "Validaci√≥n exitosa",
      "El formulario est√° listo para enviar"
    );
  }
}

/**
 * Caso: Descarga de Archivo
 */
export function downloadFileExample(fileName: string): void {
  showInfoToast("Descargando archivo...", `${fileName} est√° siendo descargado`);

  // Simular descarga completada despu√©s de 2 segundos
  setTimeout(() => {
    showSuccessToast(
      "Descarga completada",
      `${fileName} se ha descargado exitosamente`
    );
  }, 2000);
}

/**
 * Caso: Operaci√≥n de Larga Duraci√≥n
 */
export async function longOperationExample(): Promise<void> {
  showLoadingToast(
    "Procesando...",
    "Esta operaci√≥n puede tardar unos momentos"
  );

  try {
    // Simular operaci√≥n asincr√≥nica
    await new Promise((resolve) => setTimeout(resolve, 3000));

    showSuccessToast(
      "Procesamiento completado",
      "La operaci√≥n finaliz√≥ correctamente"
    );
  } catch (error) {
    showErrorToast(
      "Error en la operaci√≥n",
      "Ocurri√≥ un error durante el procesamiento"
    );
  }
}

/**
 * Caso: Cambio de Preferencias
 */
export function settingsChangeExample(setting: string, value: string): void {
  showInfoToast("Preferencia actualizada", `${setting} ahora es: ${value}`);

  // Guardar en backend
  setTimeout(() => {
    showSuccessToast(
      "Guardado en el servidor",
      "Tus cambios se han sincronizado"
    );
  }, 1000);
}

/**
 * ============================================
 * PATRONES AVANZADOS
 * ============================================
 */

/**
 * Patr√≥n: Validaci√≥n con Reintento
 */
export async function validationWithRetryExample(
  retries: number = 3
): Promise<boolean> {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      showInfoToast(
        `Intento ${attempt} de ${retries}`,
        "Validando informaci√≥n..."
      );

      // Simular validaci√≥n
      const success = Math.random() > 0.3;
      if (success) {
        showSuccessToast(
          "Validaci√≥n exitosa",
          "Datos verificados correctamente"
        );
        return true;
      }
    } catch {
      if (attempt === retries) {
        showErrorToast(
          "Fallo en la validaci√≥n",
          `No se pudo validar despu√©s de ${retries} intentos`
        );
        return false;
      }
    }

    // Esperar antes de reintentar
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  return false;
}

/**
 * Patr√≥n: Cadena de Operaciones
 */
export async function operationChainExample(): Promise<void> {
  try {
    // Paso 1
    showLoadingToast("Paso 1/3", "Descargando datos...");
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // Paso 2
    showInfoToast("Paso 2/3", "Procesando datos...");
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // Paso 3
    showInfoToast("Paso 3/3", "Guardando cambios...");
    await new Promise((resolve) => setTimeout(resolve, 1000));

    showSuccessToast(
      "Completado",
      "Todos los pasos se ejecutaron correctamente"
    );
  } catch (error) {
    showErrorToast(
      "Operaci√≥n cancelada",
      "Ocurri√≥ un error durante el proceso"
    );
  }
}
